/**
 * ImportVarsExecutorFactory.java
 * Created 21-Mar-2016 11:07:47
 *
 * @author M.D.Ward <dev@mattdw.co.uk>
 * The MIT License
 *
 * Copyright 2016 M.D.Ward <dev@mattdw.co.uk>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.mattdw.jenkins.plugins.otherbuild.envvars.execution.factory;

import com.mattdw.jenkins.plugins.otherbuild.envvars.execution.ImportVarsExecutor;
import com.mattdw.jenkins.plugins.otherbuild.envvars.importer.EnvVarsCopier;
import com.mattdw.jenkins.plugins.otherbuild.envvars.importer.OtherBuildEnvVarsImporter;
import com.mattdw.jenkins.plugins.otherbuild.envvars.importer.TemplatingEnvVarsCopier;
import com.mattdw.jenkins.plugins.otherbuild.envvars.importer.TemplatingOtherBuildEnvVarsImporter;
import com.mattdw.jenkins.plugins.otherbuild.envvars.importer.VarImporterOrCopier;
import com.mattdw.jenkins.plugins.otherbuild.envvars.importer.VarNameTemplateAware;
import com.mattdw.jenkins.plugins.otherbuild.envvars.provider.build.ExternalBuildProvider;
import com.mattdw.jenkins.plugins.otherbuild.envvars.provider.build.NamedBuildExternalBuildProvider;
import com.mattdw.jenkins.plugins.otherbuild.envvars.provider.project.ExternalProjectProvider;
import com.mattdw.jenkins.plugins.otherbuild.envvars.provider.project.SingletonCallExternalProjectProvider;
import hudson.EnvVars;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.TaskListener;



/**
 * Factory interface and default implementation for constructing an
 * {@link ImportVarsExecutor} 
 * 
 * @author M.D.Ward <dev@mattdw.co.uk>
 * 
 * @param <V>
 *      [Super]type of the variable importer/copier; must extend
 *      {@link VarImporterOrCopier}
 * @param <T>
 *      [Super]type of the variable template aware object; must extend
 *      {@link VarNameTemplateAware}
 * @param <E>
 *      [Super]type of the executor to be generated by an implementation of the
 *      factory; must extend {@link ImportVarsExecutor} and is further constrained
 *      by generics V and T, as well as EnvVars and TaskListener
 *      
 */
public interface ImportVarsExecutorFactory <V extends VarImporterOrCopier, T extends VarNameTemplateAware, E extends ImportVarsExecutor<EnvVars, V, T, TaskListener>> {

    /**
     * Creates the executor object
     * 
     * @return 
     *      Executor object
     */
    public E createExecutor();



    /**
    * Concrete implementation of {@link ImportVarsExecutorFactory} which builds
    * an executor of type {@link ImportVarsExecutor.CopierImpl} and utilises
    * variable copier and name aware objects of the corresponding types
    * 
    * @author M.D.Ward <matthew.ward@byng.co>
    */
    public static class CopierImpl extends AbstractImpl<EnvVarsCopier, TemplatingEnvVarsCopier, ImportVarsExecutor.CopierImpl> {

        /**
         * Constructor - creates a new instance of CopierImpl
         * 
         * @param projectProvider
         *      Project provider mechanism for the target build from which
         *      variables are imported
         * @param buildProvider 
         *      Build provider mechanism for the target build from which
         *      variables are imported
         */
        public CopierImpl(
            ExternalProjectProvider<AbstractProject> projectProvider,
            ExternalBuildProvider<AbstractProject, AbstractBuild> buildProvider
        ) {
            super(projectProvider, buildProvider);
        }

        /**
         * Constructor - creates a new instance of CopierImpl using defaults
         * for services utilised in building executors
         */
        public CopierImpl() {
            this(
                new SingletonCallExternalProjectProvider(),
                new NamedBuildExternalBuildProvider()
            );
        }

        /**
         * Creates the executor object, passing through services injected into
         * this factory implementations
         * 
         * @return 
         *      Executor object of type {@link ImportVarsExecutor.CopierImpl}
         */
        @Override
        public ImportVarsExecutor.CopierImpl createExecutor() {
            return new ImportVarsExecutor.CopierImpl(
                this.projectProvider,
                this.buildProvider
            );
        }

    }
    
    public static class ImporterImpl extends AbstractImpl<OtherBuildEnvVarsImporter, TemplatingOtherBuildEnvVarsImporter, ImportVarsExecutor.ImporterImpl> {

        /**
         * Constructor - creates a new instance of ImporterImpl
         * 
         * @param projectProvider
         *      Project provider mechanism for the target build from which
         *      variables are imported
         * @param buildProvider 
         *      Build provider mechanism for the target build from which
         *      variables are imported
         */
        public ImporterImpl(
            ExternalProjectProvider<AbstractProject> projectProvider,
            ExternalBuildProvider<AbstractProject, AbstractBuild> buildProvider
        ) {
            super(projectProvider, buildProvider);
        }

        /**
         * Constructor - creates a new instance of ImporterImpl using defaults
         * for services utilised in building executors
         */
        public ImporterImpl() {
            this(
                new SingletonCallExternalProjectProvider(),
                new NamedBuildExternalBuildProvider()
            );
        }
        
        /**
         * Creates the executor object, passing through services injected into
         * this factory implementations
         * 
         * @return 
         *      Executor object of type {@link ImportVarsExecutor.ImporterImpl}
         */
        @Override
        public ImportVarsExecutor.ImporterImpl createExecutor() {
            return new ImportVarsExecutor.ImporterImpl(
                this.projectProvider,
                this.buildProvider
            );
        }

    }

}



/**
 * Abstract implementation of {@link ImportVarsExecutorFactory} which stipulates
 * immutable service fields for a concrete implementation to use in constructing
 * executors.
 * 
 * This abstract class is defined as a package-protected class defined within the
 * same file as the interface it implements
 * 
 * @author M.D.Ward <matthew.ward@byng.co>
 * 
 * @param <V>
 *      [Super]type of the variable importer/copier; must extend
 *      {@link VarImporterOrCopier}
 * @param <T>
 *      [Super]type of the variable template aware object; must extend
 *      {@link VarNameTemplateAware}
 * @param <E>
 *      [Super]type of the executor to be generated by an implementation of the
 *      factory; must extend {@link ImportVarsExecutor} and is further constrained
 *      by generics V and T, as well as EnvVars and TaskListener
 *      
 */
abstract class AbstractImpl <V extends VarImporterOrCopier, T extends VarNameTemplateAware, E extends ImportVarsExecutor<EnvVars, V, T, TaskListener>> implements ImportVarsExecutorFactory<V, T, E> {

    /**
     * Project provider mechanism for the target build from which
     * variables are imported
     */
    protected final transient ExternalProjectProvider<AbstractProject> projectProvider;

    /**
     * Build provider mechanism for the target build from which
     * variables are imported
     */
    protected final transient ExternalBuildProvider<AbstractProject, AbstractBuild> buildProvider;



    /**
     * Constructor - creates a new instance of AbstractImpl
     * 
     * @param projectProvider
     *      Project provider mechanism for the target build from which
     *      variables are imported
     * @param buildProvider 
     *      Build provider mechanism for the target build from which
     *      variables are imported
     */
    public AbstractImpl(
        ExternalProjectProvider<AbstractProject> projectProvider,
        ExternalBuildProvider<AbstractProject, AbstractBuild> buildProvider
    ) {
        this.projectProvider = projectProvider;
        this.buildProvider = buildProvider;
    }

}
